open Misc

(*** Dummy FGS Controller ***)

let idle = -1
let node fgs(sensor, cmd) = sensor fby (cmd + 2)

let node controller(sensor1, sensor2, switch) = cmd where
  rec cmd1 = fgs(sensor1, cmd2)
  and cmd2 = fgs(sensor2, cmd1)
  and cmd = if switch then cmd1 else cmd2


(*** Discrete Time Model ***)

(* Memory. Maintain the last received value on a signal *)
let node mem (i, mi) = o where
  rec init m = mi
  and present i(v) -> do m = v done
  and o = last m

(* Modeling links *)
let node channel (c, dc, i) = o where
  rec init q = empty
  and trans =  present (is_empty (last q)) -> false else front(last q) <> none
  and present
      | i(v) -> do emit s = some(v) done
      | c() -> do emit s = none done
  and present
      | dc() & s(v) -> do q = enqueue(dequeue(last q), v) done
      | s(v) -> do q = enqueue (last q, v) done
      | dc() -> do q = dequeue (last q) done
  and present
      | dc() & trans -> do emit o = get(front (last q)) done

let node link (c, dc, i, mi) = o where
  rec s = channel (c, dc, i)
  and o = mem (s, mi)


(** Quasi-Periodic FGS Controller **)

let node qp_controller((c1, c2, dc1, dc2), (sensor1, sensor2, switch)) = cmd where
  rec present c1() -> do emit cmd1 = fgs(sensor1, mcmd2) done
  and present c2() -> do emit cmd2 = fgs(sensor2, mcmd1) done
  and mcmd1 = link(c1, dc1, cmd1, idle)
  and mcmd2 = link(c2, dc2, cmd2, idle)
  and cmd = if switch then cmd1 else cmd2


(*** Real-Time Model ***)

(* Architecture characteristics *)
let t_nom = 1.
let tau_nom = 0.01
let eps = 0.01

let t_min = t_nom *. (1. -. eps)
let t_max = t_nom *. (1. +. eps)
let tau_min = tau_nom *. (1. -. eps)
let tau_max = tau_nom *. (1. +. eps)

(* Quasi-periodic clocks *)
let hybrid metro (t_min, t_max) = c where
  rec der t = 1.0 init -. arbitrary (t_min, t_max)
      reset z -> -. arbitrary (t_min, t_max)
  and z = up(t)
  and present (init) | z -> do emit c done


(* Delayed clock. Model transmission delay *)
let eps_delay = 10e-5

let add_horizon(q, tr, v_min, v_max) =
  let d = arbitrary(tr +. v_min, tr +. v_max) in
  if not (is_empty(q)) then enqueue(q, max(back(q) +. eps_delay, d))
  else enqueue(q, d)

let hybrid delay(c, tau_min, tau_max) = dc where
  rec init q = empty
  and der time = 1.0 init 0.0
  and der t = 1.0 init 0.0
      reset z on (size(q) > 0) | c() on (size(q) = 1) -> time -. front(q)
  and z = up (t)
  and present
      | c() & z -> do q = add_horizon(dequeue(last q), time, tau_min, tau_max) done
      | c() -> do q = add_horizon(last q, time, tau_min, tau_max) done
      | z -> do q = dequeue(last q) done
  and present z -> do emit dc done

(** Complete FGS Controller **)

let hybrid rt_controller(sensor1, sensor2, switch) = cmd where
  rec c1 = metro(t_min, t_max)
  and dc1 = delay(c1, tau_min, tau_max)
  and c2 = metro(t_min, t_max)
  and dc2 = delay(c2, tau_min, tau_max)
  and present c1() | dc1() | c2() | dc2() -> do emit g done
  and present g() -> do cmd = qp_controller((c1, c2, dc1, dc2),
                                            (sensor1, sensor2, switch)) done


let hybrid main () =
  let cmd = rt_controller(0, 1, false) in
  present cmd(v) -> print(v) else ()
